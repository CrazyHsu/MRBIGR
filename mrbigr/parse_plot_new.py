#!/usr/bin/env python
# -*- coding: utf-8 -*-

def parse_plot_new(subparsers, sys):
    parser_plot_new = subparsers.add_parser('plot_new',
                                            help='Visualize the results generated by MRBIGR and the data used in MRBIGR by various types of plots')
    parser_plot_new_sub = parser_plot_new.add_subparsers(help="The plot types supported by MRBIGR",
                                                         metavar='[phylotree, manhattan, qq, scattermr, scatterps, forest, SNPdensity, hist, boxplot, barplot, dotplot]')

    # phylogenetic tree plot
    plot_phylo = parser_plot_new_sub.add_parser('phylotree', help="Construct phylogenetic tree",
                                                usage='%(prog)s [options]')
    plot_phylo.add_argument('-bed', dest="plink_bed", default=None, help="The plink bed file")
    plot_phylo.add_argument('-nwk', dest="nwk_file", default=None,
                            help="The nwk file used to construct phylogenetic tree. When nwk file is set, the information in bed file will not be used.")
    plot_phylo.add_argument('-o', dest="out_prefix", default="MRBIGR", help="The output file prefix")
    plot_phylo.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')
    plot_phylo.add_argument('-group', dest="group_file", default=None,
                            help="The group information used to color the sub-population. Default: None")
    plot_phylo.add_argument('-group_sep', dest="group_sep", default=",", help="The separator of group file. Default: ','")
    plot_phylo.add_argument('-subs', dest="sub_lines", default=None,
                            help="The selected strains to analysis, with family ID and starin ID per line. Default: None")
    plot_phylo.add_argument('-drops', dest="drop_lines", default=None,
                            help="The drop lines which you don't want to draw in the phylogenetic tree. Default: None")

    # scatter plot for population structure
    plot_scatterps = parser_plot_new_sub.add_parser('scatterps', help='Draw PCA or tSNE plots for population structure',
                                                    usage='%(prog)s [options]')
    plot_scatterps.add_argument('-i', dest='input', required=True, help="The input population structure file.")
    plot_scatterps.add_argument('-g', dest="group_file", required=True,
                                help="The group information used to color the sub-population. Default: None")
    plot_scatterps.add_argument('-o', dest="out_prefix", default="MRBIGR", help="The output file prefix")
    plot_scatterps.add_argument('-ps_type', dest="ps_type", default="pca",
                                help="The population type you want to draw: pca or tsne")
    plot_scatterps.add_argument('-input_sep', dest="input_sep", default=",",
                                help="The separator of input file. Default: ','")
    plot_scatterps.add_argument('-group_sep', dest="group_sep", default=",",
                                help="The separator of input file. Default: ','")
    plot_scatterps.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # manhattan plot
    plot_mht = parser_plot_new_sub.add_parser("manhattan", help='Draw manhattan plots for GWAS results',
                                              usage='%(prog)s [options]')
    plot_mht.add_argument('-i', dest="input", help="The GWAS results")
    plot_mht.add_argument("-od", dest="out_dir", default="MRBIGR",
                          help="The output directory, and manhattan plot of each association file will be suffixed with '_manhattan.jpg'")
    plot_mht.add_argument("-threshold_low", dest="thresholdL", type=float, default=0.000001,
                          help="The low p-value threshold for plotting")
    plot_mht.add_argument("-threshold_upper", dest="thresholdU", type=float, default=0.00001,
                          help="The high p-value threshold for plotting")
    plot_mht.add_argument("-threshold_default", dest="thresholdD", type=float, default=None,
                          help="The data-orient p-value threshold for plotting")
    plot_mht.add_argument("-chrom", dest="chrom", type=str, default="",
                          help="Specify the chromosome to plot. Default plot all the chromosomes")
    plot_mht.add_argument("-start", dest="start", type=int, default=0,
                          help="Specify the start position to plot. Default: 0")
    plot_mht.add_argument("-end", dest="end", type=int, default=0,
                          help="Specify the start position to plot. Default: length of chromosome")
    plot_mht.add_argument("-hl_pos", dest="hl_pos", type=str, default="",
                          help="Specify the position of SNPs to be highlighted. Use comma to separate multiple positions.")
    plot_mht.add_argument("-hl_text", dest="hl_text", type=str, default="",
                          help="The texts to be highlighted. Use comma to separate multiple positions.")
    plot_mht.add_argument("-file_type", dest="file_type", type=str, default="jpg",
                          help="The output file type [jpg, pdf, tiff]. Default: jpg")
    plot_mht.add_argument("-data_from", dest="data_from", default="file",
                          help="The type of GWAS output stored, 'file' or 'list' or 'directory'. Default: file")
    plot_mht.add_argument("-input_sep", dest="input_sep", default="\t", help="The separator in GWAS file. Default: tab")
    plot_mht.add_argument("-t", dest="threads", default=1,
                          help="The number of threads used to parallel draw the plot. Default: 1")
    plot_mht.add_argument("-dpi", dest="dpi", type=int, default=300, help="The DPI of the plot. Default: 300")
    plot_mht.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # QQ plot
    plot_qq = parser_plot_new_sub.add_parser('qq', help='Draw QQ plots for GWAS results', usage='%(prog)s [options]')
    plot_qq.add_argument('-i', dest="input", help="The GWAS results")
    plot_qq.add_argument("-od", dest="out_dir", default="MRBIGR",
                         help="The output directory, and qq plot of each association file will be suffixed with '_qq.jpg'")
    plot_qq.add_argument("-data_from", dest="data_from", default="file",
                         help="The type of GWAS output stored, 'file' or 'list' or 'directory'. Default: file")
    plot_qq.add_argument("-input_sep", dest="input_sep", default="\t", help="The separator in GWAS file. Default: tab")
    plot_qq.add_argument("-t", dest="threads", type=int, default=1,
                         help="The number of threads used to parallel draw the plot. Default: 1")
    plot_qq.add_argument("-dpi", dest="dpi", type=int, default=300, help="The DPI of the plot. Default: 300")
    plot_qq.add_argument("-threshold", dest="threshold", type=float, default=0.000001,
                         help="The signal threshold for Q-Q plot. Default: 1e-6")
    plot_qq.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # phenotype boxplot
    plot_ptb = parser_plot_new_sub.add_parser('phebox', help='Draw box-line plots for genotypes in different strains',
                                              usage='%(prog)s [options]')
    plot_ptb.add_argument('-i', dest="input", help="The expression file")
    plot_ptb.add_argument('-bed', dest="plink_bed", help="The plink bed file")
    plot_ptb.add_argument('-snp', dest="snp", help="The SNP file")
    plot_ptb.add_argument('-group', dest="group", help="The group file")
    plot_ptb.add_argument('-s_genes', dest="selected_genes", default=None,
                          help="The file listing selected genes or a string with comma separated")
    plot_ptb.add_argument('-s_snps', dest="selected_snps", default=None,
                          help="The file listing selected SNPs or a string with comma separated")
    plot_ptb.add_argument('-s_strains', dest="selected_strains", default=None,
                          help="The file listing selected strains or a string with comma separated")
    plot_ptb.add_argument('-scale', dest="scale", default=False, action="store_true", help="Scale the phenotype values")
    plot_ptb.add_argument('-plot_type', dest="plot_type", choices=["single_gene", "multi_genes", "single_pop"],
                          default="single_gene",
                          help="The type of graph to be plotted. Options are: single_gene, multi_gene, single_pop. Default: single_gene")
    plot_ptb.add_argument("-o", dest="out_prefix", default="MRBIGR", help="The output file prefix")
    plot_ptb.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # scatter plot for MR results
    plot_scattermr = parser_plot_new_sub.add_parser('scattermr', help='Draw scatter plots for interested genes under '
                                                                  'different traits or conditions using MR results',
                                           usage='%(prog)s [options]')
    plot_scattermr.add_argument('-i', dest="input", help="The MR results file")
    plot_scattermr.add_argument("-o", dest="out_prefix", default="MODASv", help="The output file prefix")
    plot_scattermr.add_argument("-group_file", dest="group_file", default=None,
                                help="The group file used to color the pTrait")
    plot_scattermr.add_argument("-order_by_pvalue", dest="order_by_pvalue", action="store_true", default=False,
                                help="Order the 'exposure' by pvalue. Default: False")
    plot_scattermr.add_argument("-order_by_group", dest="order_by_group", action="store_true", default=False,
                                help="Order the 'exposure' by group. Default: False")
    plot_scattermr.add_argument("-sig_p", dest="sig_p", type=float, default=None,
                                help="The significant p-value threshold for plotting")
    plot_scattermr.add_argument("-input_sep", dest="input_sep", default=",",
                                help="The separator in MR result. Default: comma")
    plot_scattermr.add_argument("-height", dest="height", default=5, type=float,
                                help="The height of output plot. Default: ")
    plot_scattermr.add_argument("-width", dest="width", default=9, type=float,
                                help="The width of output plot. Default: ")
    plot_scattermr.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # forest plot
    plot_forest = parser_plot_new_sub.add_parser('forest',
                                                 help='Draw forest plots for interested genes under different traits or conditions using MR results',
                                                 usage='%(prog)s [options]')
    plot_forest.add_argument('-i', dest="input", help="The MR results file")
    plot_forest.add_argument("-o", dest="out_prefix", default="MRBIGR", help="The output file prefix")
    plot_forest.add_argument("-order_by_name", dest="order_by_name", action="store_true", default=False,
                             help="Order the 'exposure' by name. Default: False")
    plot_forest.add_argument("-order_by_effect", dest="order_by_effect", action="store_true", default=False,
                             help="Order the 'exposure' by effect. Default: False")
    plot_forest.add_argument("-order_by_group", dest="order_by_group", action="store_true", default=False,
                             help="Order the 'exposure' by group. Default: False")
    plot_forest.add_argument("-group", dest="group", required="-order_by_group" in sys.argv, default=None,
                             help="The group file used to order the output. Required when '-order_by_group' specified")
    plot_forest.add_argument("-input_sep", dest="input_sep", default=",",
                             help="The separator in MR result. Default: comma")
    plot_forest.add_argument("-height", dest="height", default=6, type=float,
                             help="The height of output plot. Default: 6")
    plot_forest.add_argument("-width", dest="width", default=4, type=float, help="The width of output plot. Default: 4")
    plot_forest.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # MR-based network construction and visualization
    plot_net = parser_plot_new_sub.add_parser('net', help='MR-based network construction and visualization',
                                           usage='%(prog)s [options]')
    plot_net.add_argument('-i', dest="input", help="The MR results file")
    plot_net.add_argument("-o", dest="out_prefix", default="MODASv", help="The output file prefix")
    plot_net.add_argument("-input_sep", dest="input_sep", default=",",
                          help="The separator in MR result. Default: comma")
    plot_net.add_argument("-sig_p", dest="pvalue", default=0.001, type=float,
                          help="pvalue cutoff for MR-based network analysis. Default: 1e-3")
    plot_net.add_argument("-ms", dest="module_size", default=5, type=int,
                          help="The minimal size of genes in a module. Default: 5")
    plot_net.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')
    plot_net.add_argument("-height", dest="height", default=5, type=float, help="The height of output plot. Default: 5")
    plot_net.add_argument("-width", dest="width", default=5, type=float, help="The width of output plot. Default: 5")

    # Enrich plot with various types
    plot_go = parser_plot_new_sub.add_parser('go', help='Draw enrichment plot with various plot type', usage='%(prog)s [options]')
    plot_go.add_argument('-i', dest="input", required=True, help="The gene list used to be enriched")
    plot_go.add_argument("-o", dest="out_prefix", default="MODASv", help="The output file prefix")
    plot_go.add_argument('-bg', dest="gene2go", required=True, help="The background file containing gene to GO pairs")
    plot_go.add_argument("-bg_sep", dest="bg_sep", default="\t", help="The separator of pairs in gene2go file. Default: tab")
    plot_go.add_argument('-plot_type', dest="plot_type", choices=["barplot", "dotplot", "emap"], default="dotplot", help="The visualization type of plots you want to implement. Default: dotplot. Choices are: barplot, dotplot, emap")
    plot_go.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')
    plot_go.add_argument('-sigp', dest="sigp", type=float, default=0.05, help="The significant p-value used to filter the results. Default: 0.05")
    plot_go.add_argument('-adjustp', dest="adjustp", action="store_true", default=False, help="Adjust p-value. Default: False")
    plot_go.add_argument("-height", dest="height", default=5, type=float, help="The height of output plot. Default: 5")
    plot_go.add_argument("-width", dest="width", default=5, type=float, help="The width of output plot. Default: 5")

    # heatmap plot
    plot_heatmap = parser_plot_new_sub.add_parser('heatmap',
                                                  help='Draw heat map for various genes under different conditions',
                                                  usage='%(prog)s [options]')
    plot_heatmap.add_argument('-i', dest="input", help="The matrix used to draw heatmap")
    plot_heatmap.add_argument("-o", dest="out_prefix", default="MRBIGR", help="The output file prefix")
    plot_heatmap.add_argument("-row_select", dest="row_select", default=None, help="The selected rows")
    plot_heatmap.add_argument("-col_select", dest="col_select", default=None, help="The selected columns")
    plot_heatmap.add_argument("-anno_row", dest="anno_row", default=None, help="Annotate the rows with a file")
    plot_heatmap.add_argument("-anno_col", dest="anno_col", default=None, help="Annotate the columns with a file")
    plot_heatmap.add_argument("-cluster_rows", dest="cluster_rows", action="store_true", default=False,
                              help="Cluster rows")
    plot_heatmap.add_argument("-cluster_cols", dest="cluster_cols", action="store_true", default=False,
                              help="Cluster columns")
    plot_heatmap.add_argument("-order_row_by", dest="order_row_by", default=None,
                              help="Order rows by a file containing a list of names")
    plot_heatmap.add_argument("-order_col_by", dest="order_col_by", default=None,
                              help="Order columns by a file containing a list of names")
    plot_heatmap.add_argument("-scale_by", dest="scale_by", default="none", choices=["none", "row", "column"],
                              help="Scale the values in either the 'row' direction or the 'column' direction, or 'none'. Default: 'none'")
    plot_heatmap.add_argument("-show_rownames", dest="show_rownames", action="store_true", default=False,
                              help="Show row names")
    plot_heatmap.add_argument("-show_colnames", dest="show_colnames", action="store_true", default=False,
                              help="Show column names")
    plot_heatmap.add_argument("-height", dest="height", type=float, default=5,
                              help="The height of output plot. Default: 5")
    plot_heatmap.add_argument("-width", dest="width", type=float, default=5,
                              help="The width of output plot. Default: 5")
    plot_heatmap.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # nucleotide diversity
    plot_nd = parser_plot_new_sub.add_parser('nd',
                                             help='Draw nucleotide density plots for a genome region in a population',
                                             usage='%(prog)s [options]')
    plot_nd.add_argument('-bed', dest="plink_bed", help="The plink bed file")
    plot_nd.add_argument("-o", dest="out_prefix", default="MRBIGR", help="The prefix of output files. Default: MRBIGR")
    plot_nd.add_argument("-od", dest="out_dir", default="MRBIGR", help="The output directory. Default: MRBIGR")
    plot_nd.add_argument("-group", dest="group_file", help="The group file")
    plot_nd.add_argument("-gff_anno", dest="gff_annotation", help="The annotation with format in 'gff'")
    plot_nd.add_argument("-select_genes", dest="select_genes", default=None,
                         help="The file containing a list of genes with one per row or a regular string containing genes with comma separated.")
    plot_nd.add_argument("-chrom", dest="chrom", default=None, type=str, help="Specify the chromosome id")
    plot_nd.add_argument("-chrom_start", dest="chrom_start", default=0, type=int, help="Specify the start of interval")
    plot_nd.add_argument("-chrom_end", dest="chrom_end", default=0, type=int, help="Specify the end of interval")
    plot_nd.add_argument("-method", dest="method", default="pi", help="The method used to calculate the diversity")
    plot_nd.add_argument("-plot_by_gene", dest="plot_by_gene", action="store_true", default=False,
                         help="The draw a single plot for every gene. Default: False")
    plot_nd.add_argument("-keep_temp", dest="keep_temp", action="store_true", default=False,
                         help="Keep the temporary files or not. Default: False")
    plot_nd.add_argument("-left_offset", dest="left_offset", type=int, default=0,
                         help="The left offset to expand the gene region. Default: 0")
    plot_nd.add_argument("-right_offset", dest="right_offset", type=int, default=0,
                         help="The left offset to expand the gene region. Default: 0")
    plot_nd.add_argument("-plot_left_expand", dest="plot_left_expand", type=int, default=500,
                         help="The left expanding to plot. Default: 500")
    plot_nd.add_argument("-plot_right_expand", dest="plot_right_expand", type=int, default=500,
                         help="The right expanding to plot. Default: 500")
    plot_nd.add_argument("-window_size", dest="window_size", type=int, default=1000,
                         help="The window size to calculate PI, fst or Tajima's D. Default: 1000")
    plot_nd.add_argument("-window_step", dest="window_step", type=int, default=50,
                         help="The window step to calculate PI, fst or Tajima's D. Default: 50")
    plot_nd.add_argument("-smooth", dest="smooth", action="store_true", default=False,
                         help="Smooth the line plot. Default: False")
    plot_nd.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')

    # box plot for different group
    plot_group = parser_plot_new_sub.add_parser('group', help='Draw box plot for different group',
                                                usage='%(prog)s [options]')
    plot_group.add_argument('-i', dest="input", required=True, help="The expression file")
    plot_group.add_argument("-group_field", dest="group_field", default="group",
                            help="The field used to group the values. Default: 'group'")
    plot_group.add_argument("-value_field", dest="value_field", default="expression",
                            help="The value field used to calculate. Default: 'expression'")
    plot_group.add_argument("-fill_field", dest="fill_field", default="None",
                            help="The value field used to calculate. Default: 'expression'")
    plot_group.add_argument("-group_order", dest="group_order", default="None",
                            help="The order of groups to plot")
    plot_group.add_argument("-sep", dest="sep", default=",", help="The separate character of input file")
    plot_group.add_argument("-group_min_n", dest="group_min_n", type=int, default=0,
                            help="The minimal number of members of a group. Default: 0")
    plot_group.add_argument("-o", dest="out_prefix", default="MRBIGR",
                            help="The prefix of output files. Default: MRBIGR")
    plot_group.add_argument("-height", dest="height", type=float, default=6,
                            help="The height of output plot. Default: 5")
    plot_group.add_argument("-width", dest="width", type=float, default=8, help="The width of output plot. Default: 5")
    plot_group.add_argument("-add_pvalue", dest="add_pvalue", action='store_true', help="Whether to calculate t-test pvalue between filled groupsd.")
    plot_group.add_argument('-plot_fmt', default='pdf', metavar='[jpg,pdf]', help='The format of the output plots')
